filter {
	if ([type] == "syslog") { 
		grok { match => ["message","%{SYSLOGBASECUSTOM} %{GREEDYDATA:syslogmessage}"] }
		
		### Here the @timestamp validation begins ###
		date { match => ["timestamp", "MMM  d HH:mm:ss","MMM dd HH:mm:ss"] 
		       target=> "newtimestamp"}
		ruby{code=> ' parsed = event.get("newtimestamp")
			      collected = event.get("@timestamp")
			      event.set("[tags]","badtime") if collected-parsed>86400
			    '}
		if "badtime" not in [tags]
		{
			date
			{
				match => ["timestamp", "MMM d HH:mm:ss","MMM dd HH:mm:ss"]
			}
		}
		mutate { remove_field => ["newtimestamp"]}
		### Here ends timestamp validation ###

		if [program] == "postgrey" {
			grok{ match => {"syslogmessage" => ["%{POSTGREY}","%{NOTSPACE:action}: %{NOTSPACE:client_name}\[%{IP:src_ip}\]"]} }
		} else {
			grok {
				match => ["syslogmessage","%{FIREWALLCUSTOM}"]
				add_tag => "firewall"
				tag_on_failure => []
			}

			if ("firewall" in [tags]) {
	                	mutate { 
					replace => { "type" => "firewall" }
					remove_tag => ["firewall"]
				}
			}
			
		}	
	}
}
