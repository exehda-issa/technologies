filter {
  if [type] == "mod_security" {
    mutate { add_tag => [ "modsec_audit" ] }
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Due to the complexity of the collapsed single string
    # we get from multiline and the variance of exactly
    # which modsec sections (A-K) may or may not be in each
    # log entry, we run some custom ruby code that will
    # split on each modsec "section" and store each found in
    # new fields named "rawSection[A-K]" as appropriate, the value
    # of each of these fields contains the raw un-parsed data
    # from that modsec section. Sections that are non-existant
    # will not have a key in "fields"
    #
    # A bit long and crazy yes, but after spending many hours
    # just doing this w/ grok patterns, this ended up being the
    # most reliable way to break up this in-consistent format into
    # more usable blocks
    #
    # @see https://github.com/SpiderLabs/ModSecurity/wiki/ModSecurity-2-Data-Formats
    #
    # READ the above to get a good understanding of the sections
    # and which ones can actively contain data depending on your modsec
    # version and environment!
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ruby {
      code => '
          if !event.get("message").nil?
              modSecSectionData = event.get("message").split(/(?:--[a-fA-F0-9]{8}-([A-Z])--)/)
              modSecSectionData.shift
              for i in 0..((modSecSectionData.length-1)/2)
                  sectionName = "rawSection".concat(modSecSectionData.shift)
                  sectionData = modSecSectionData.shift
                  sectionName = sectionName.strip
                  if !sectionData.nil?
                      sectionData = sectionData.strip
                  end
                  event.set(sectionName, sectionData)
              end
          end
        '
    }

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Parse out fields from Section A (general event basics)
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    grok {
      match => {
        "rawSectionA" => "\[(?<modsec_timestamp>%{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME} [-\+]{1,2}%{INT})\] %{DATA:uniqueId} %{IP:src_ip} %{INT:src_port} %{IP:dst_ip} %{INT:dst_port}"
      }
    }
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Parse out fields from Section B (request related line 1)
    # note line one could be garbage OR adhere to the
    # httpMethod [space] uri [space] protocol pattern
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    # if a legit line... normal http request
    if [rawSectionB] =~ /.+/ {
      grok {
        match => {
          "rawSectionB" => [  "(?m)^%{DATA:httpMethod}\s(?<requestedUri>\S+)\s(?<incomingProtocol>[^\n]+)(?:\n(?<raw_requestHeaders>.+)?)?$",
                              "(?<httpMethod>^(.*)$)" ]
        }
      }
    }
#  }
#}
#filter {
#  if [type] == "mod_security" {
#    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#    # Convert raw request headers into a key/value
#    # pair map
#   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#    if [raw_requestHeaders] =~ /.+/ {
#      kv {
#        source => "raw_requestHeaders"
#        field_split => "\n"
#        value_split => ":"
#        target => "requestHeaders"
#      }
#
#
#      # trim leading/trailing hack  @see https://logstash.jira.com/browse/LOGSTASH-1369
#      ruby {
#        code => "
#            requestHeaders = event.to_hash['requestHeaders']
#            requestHeaders.each { |k, v|
#              if !v.nil? and v.is_a? String
#                requestHeaders[k] = v.strip
#              end
#            }
#          "
#      }
#    }
#  }
#}
#filter {
#  if [type] == "mod_security" {

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Parse out fields from Section C (post data)
    # this is not always present
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    if [rawSectionC] =~ /.+/ {
      grok {
        match => {
          "rawSectionC" => "(?<requestBody>.+)"
        }
      }
    }
#  }
#}
#filter {
#  if [type] == "mod_security" {

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Parse out server protocol/HTTP status from Section F (response related, line 1)
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    if [rawSectionF] =~ /.+/ {

      grok {
        match => {
          "rawSectionF" => "(?m)^(?<serverProtocol>.+?)\s(?<responseStatus>[^\n]+)(\n(?<raw_responseHeaders>.+)?)?$"
        }
      }
      grok{
   	match => { "responseStatus" => "%{NUMBER:responseCode} %{GREEDYDATA}"}
	remove_field => ["responseStatus"]
   	}
     }
#  }
#}
#filter {
#  if [type] == "mod_security" {

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Parse out response headers from Section F (response headers, lines 2+)
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    # only if the server responded...WITH headers...
    if [rawSectionF] =~ /(.+?)\s(.+)\n{1}/ {

      grok {
        match => {
          "rawSectionF" => ".+?\n(?m)(?<raw_responseHeaders>.+)"
        }
      }
    }
#  }
#}
#filter {
#  if [type] == "mod_security" {
#
#    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#    # Convert raw response headers into a key/value
#    # pair map
#    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#    if [raw_responseHeaders] =~ /.+/ {
#      kv {
#        source => "raw_responseHeaders"
#        field_split => "\n"
#        value_split => ":"
#        target => "responseHeaders"
#      }
#
      # trim leading/trailing hack  @see https://logstash.jira.com/browse/LOGSTASH-1369
#      ruby {
#        code => "
#            responseHeaders = event.to_hash['responseHeaders']
#            responseHeaders.each { |k, v|
#              if !v.nil? and v.is_a? String
#                responseHeaders[k] = v.strip
#              end
#            }
#          "
#      }
#    }
#  }
#}
#filter {
#  if [type] == "mod_security" {

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Explode all "Messages" from sectionH to first
    # class objects w/ properties and store in an array
    # called "auditLogTrailerMessages"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#    if [rawSectionH] =~ /.+/ {
#
#      # build the auditlog trailer messages
#      ruby {
#        code => "
#            def extractVal(pattern, fromString, storeResultIn, underKeyName, multiValues=false)
#              if multiValues
#                result = fromString.scan(pattern)
#                if !result.empty?
#                  storeResultIn[underKeyName] = result.flatten
#                end
#              else
#                result = pattern.match(fromString)
#                if !result.nil?
#                  storeResultIn[underKeyName] = result[1]
#                end
#              end
#            end
#
#            w = "teste"
#            puts w
#            auditLogTrailerMessages = Array.new()
#            trailer_array = event.to_hash['rawSectionH'].split(/\n/)
#            trailer_array.each do |entry|
#              if entry.match(/^Message: /)
#                msg = Hash.new()
#                extractVal(/Message: (.+)\s($|(\s*\[file))/, entry, msg, 'info')
#                extractVal(/\[file \"(.*?)\"\]/, entry, msg, 'file')
#                extractVal(/\[line \"(.*?)\"\]/, entry, msg, 'line')
#                extractVal(/\[id \"(.*?)\"\]/, entry, msg, 'id')
#                extractVal(/\[msg \"(.*?)\"\]/, entry, msg, 'msg')
#                extractVal(/\[severity \"(.*?)\"\]/, entry, msg, 'severity')
#                extractVal(/\[data \"(.*?)\"\]/, entry, msg, 'data')
#                extractVal(/\[tag \"(.*?)\"\]/, entry, msg, 'tag')
#                auditLogTrailerMessages.push(msg)
#              end
#            end
#            puts w
#
#            #event.to_hash.merge!('auditLogTrailerMessages' => auditLogTrailerMessages)
#            event.set('auditLogTrailerMessages', auditLogTrailerMessages)
#          "
#      }
#    }
#  }
#}
#filter {
#  if [type] == "mod_security" {

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Convert section H into a key/value
    # pair map called "auditLogTrailer"
    # delete the 'Message' sub-key and replace with 'auditLogTrailerMessages'
    # built in the previous section under key 'messages', then
    # delete auditLogTrailerMessages
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#    if [rawSectionH] =~ /.+/ {
#      kv {
#        source => "rawSectionH"
#        field_split => "\n"
#        value_split => ":"
#        target => "auditLogTrailer"
#      }

      # trim leading/trailing hack  @see https://logstash.jira.com/browse/LOGSTASH-1369
#      ruby {
#        code => "
#            auditLogTrailer = event.to_hash['auditLogTrailer']
#            auditLogTrailerMessages = event.to_hash['auditLogTrailerMessages']
#            auditLogTrailer.each { |k, v|
#              if !v.nil? and v.is_a? String
#                auditLogTrailer[k] = v.strip
#              end
#            }
#            auditLogTrailer.delete('Message')
#            auditLogTrailer['messages'] = auditLogTrailerMessages
#            event.to_hash.delete('auditLogTrailerMessages')
#          "
#      }
#    }
#  }
#}
#filter {
#  if [type] == "mod_security" {

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Promote raw "stopwatch" in section H
    # to a real date. The value is in microseconds
    # since epoch (convert to seconds) then
    # run through logstashes' routine. The result
    # of this is that the logstash @timestamp is converted
    # to be the modsec stopwatch timestamp value. We
    # also retain the milliseconds and seconds fields
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    grok {
      match => {
        "rawSectionH" => "Stopwatch: %{WORD:event_date_microseconds}"
      }
    }

    mutate {
      convert => [ "event_date_microseconds", "float" ]
    }

    # micro -> milli
    ruby {
      code => "
#          event_date_milliseconds = event.get('event_date_microseconds') / 1000.0
#          event_date_milliseconds = (event.to_hash['event_date_microseconds'] / 1000.0)
#          event.to_hash.merge!('event_date_milliseconds' => event_date_milliseconds)
         event.set('event_date_seconds', event.get('event_date_microseconds') / 1000000.0)
        "
    }

    # milli -> seconds
#    ruby {
#      code => "
#          event_date_seconds = (event.to_hash['event_date_milliseconds'] / 1000.0)
#          event.to_hash.merge!('event_date_seconds' => event_date_seconds)
#        "
#    }

    # NOTE!, this forces the event's @timestamp to be = to the stopwatch value
    date {
      match => [ "event_date_seconds", "UNIX" ]
#      timezone => "GMT"
    }

    # a second copy of a iso8601 date
#    ruby {
#      code => "
#          event.to_hash.merge!('event_timestamp' => (Time.at(event.to_hash['event_date_seconds']).gmtime).iso8601(3))
#        "}

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Convert section K into an array
    # and rename it to "matchedRules"
    # also create an array of just the
    # secRuleIds that were located in
    # sectionK
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    if [rawSectionK] =~ /.+/ {

      # hack.. @see https://logstash.jira.com/browse/LOGSTASH-1331
      mutate {
        gsub => [ "rawSectionK", "\n", "~" ]
        split => [ "rawSectionK" , "~" ]
      }

      mutate {
        rename => [ "rawSectionK", "matchedRules"]
      }

      ruby {
        code => "
            secRuleIds = Array.new()
            matchedRules_array = event.get('matchedRules')
            matchedRules_array.each do |entry|
              if entry.match(/^SecRule /) and entry.match(/,id:/)
                secRuleIds.push(/,id:(?<ruleId>\d+)/.match(entry)[:ruleId])
              end
            end
            event.set('secRuleIds', secRuleIds)
          "
      }
    }

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Get rid of fields that we don't need anymore
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    mutate {
      remove_field => [ "message", "raw_responseHeaders", "raw_requestHeaders", "rawSectionZ"]
    }

	if [rawSectionE]
	{
    		grok
		{
			match => ["rawSectionE","^<!DOCTYPE HTML"]
			tag_on_failure => ["_invalidSectionE"]
		}
		if "_invalidSectionE" in [tags]
		{
			mutate
			{
				remove_field => ["rawSectionE"]
			}
		}
 	}
    }
}
