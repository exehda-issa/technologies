filter {
    if[type] == "bitdef" {	
	if [source] =~ "spam.log" {
		# filter first part of the spam.log message
		grok { match => ["message","%{BD_SPAM}"] }

		# get domain name from sender
		grok { match => ["sender","%{DATA}@%{GREEDYDATA:sender_domain}"] }

		# separe user from @domain*.
		grok { match => ["recipient","%{DATA:user}@domain.%{GREEDYDATA}"] }

		# get filter statistics from spam.log
		grok {
                	match => { "message" => [
				"RBL DNSBL: \[Enabled, Score: %{NUMBER:[rbl][score1]:int}\(%{NUMBER:[rbl][score2]:int}\), t: \(%{NUMBER:[rbl][time1]:float}(,%{NUMBER:[rbl][time2]:float}\))?",
				"BW: \[Enabled, t: \(%{NUMBER:[bw][time1]:float}(,%{NUMBER:[bw][time2]:float}\))?",
				"APM: \[Enabled, Score: %{NUMBER:[apm][score]:int}, t: \(%{NOTSPACE:[apm][time]:float}\), Flags: %{DATA:[apm][flags]}\]",
				"URL: \[Enabled, t: \(%{NUMBER:[url][time1]:float}(,%{NUMBER:[url][time2]:float})?\)(, spam url: %{NOTSPACE:[url][spam_url]})?",
				"RTDA: \[Enabled, t: \(%{NUMBER:rtda_time:float}","SGN: \[Enabled, t: \(%{NUMBER:[sgn][time1]:float}(,%{NUMBER:[sgn][time2]:float})?",
				"Multi: \[Enabled, t: \(%{NUMBER:[multi][time1]:float},%{NUMBER:[multi][time2]:float}",
				"Received: from %{NOTSPACE} \(%{NOTSPACE} \[%{IP:mail_source_ip}\]\)\t"
                       ]}
                	tag_on_failure => [""]
	                break_on_match => false
		}
			#converts to 0.0 if the object is Nil
                        ruby {
                                code => 'event.set("bitdef_time", event.get("[rbl][time1]").to_f + event.get("[rbl][time2]").to_f + event.get("[apm][time]").to_f + event.get("[bw][time1]").to_f + event.get("[bw][time2]").to_f + event.get("[sgn][time]").to_f + event.get("[multi][time1]").to_f + event.get("[multi][time2]").to_f)'
                        }
                
		if [mail_src_ip]
		{
			geoip{source => "mail_src_ip"}
		}
		mutate {
			convert => {"bitdef_time" => "float"}
			remove_field => ["bw","multi","rtda_time"]
			convert => {"score" => "integer"}
        	        split  =>  {"[apm][flags]" => ";"}
	        }
	}
	else if [source] =~ "cf.log" {
		grok { match => ["message", "%{BD_CF}"] }
		mutate {
			convert => {"total_time" => "float"}
			gsub => ["header_recipients","\"","",
				 "header_recipients",";",""]
			strip => ["header_recipents"]
			split => {"header_recipients" => " "}
		}
	}

	date { match => ["timestamp","MM/dd/YYYY HH:mm:ss"] }
	mutate { remove_field => ["timestamp"] }
    }	 
} 
