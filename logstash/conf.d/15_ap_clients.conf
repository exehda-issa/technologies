input {
  exec {
    command => "/usr/bin/python /etc/logstash/ap_client_info.py"
    interval => 180
    type => "vendor"
    codec => "json_lines"
  }
}

filter {

	if [type] == "vendor" {
		if [wlanTxBytes] {
			mutate { 
				add_tag => [ "vendor_ap" ] 
	
				rename => { "apMac" => "ap_mac" }
				rename => { "essid" => "ap_essid" }
				rename => { "signal" => "ap_signal" }
        	    lowercase => ["deviceName"]


				convert => { 
				"wlanTxBytes" => "integer"
				"wlanRxPackets" => "integer"
				"wlanPollingCapacity" => "integer"
				"wlanTxPackets" => "integer"
				"wlanConnections" => "integer"
				"chain0Signal" => "float"
				"ccq" => "integer"
				"lanRxPackets" => "integer"
				"lanPlugged" => "integer"
				"ap_signal" => "float"
				"longitude" => "float"
				"wlanTxErrors" => "integer"
				"wlanRxErrors" => "integer"
				"wlanPollingQuality" => "integer"
				"wlanRxErrFrag" => "integer"
				"wlanRxErrOther" => "integer"
				"chain1Signal" => "float"
				"lanTxBytes" => "integer"
				"wlanTxLatency" => "integer"
				"wlanTxRate" => "float"
				"loadavg" => "integer"
				"distance" => "integer"
				"latitude" => "float"
				"freq" => "integer"
				"ackTimeout" => "integer"
				"noise" => "float" 
				"wlanRxRate" => "float"
				"wlanPolling" => "integer"
				"wlanRxErrRetries" => "integer"
				"wlanRxErrCrypt" => "integer"
				"wlanRxErrBmiss" => "integer"
				"memFree" => "float"
				"wlanUptime" => "integer"
				"memTotal" => "float"
				"lanRxBytes" => "integer"
				"lanTxPackets" => "integer"
				"memBuffers" => "float"
				"wlanRxErrNwid" => "integer"
				"uptime" => "integer"
				"lanRxErrors" => "integer"
				"lanTxErrors" => "integer"
				"wlanRxBytes" => "integer"
				}
			}
			ruby { code => 'event.set("memTotal",event.get("memTotal").to_i * 1024)' }
			ruby { code => 'event.set("memFree",event.get("memFree").to_i * 1024)' }
			ruby { code => 'event.set("memBuffers",event.get("memBuffers").to_i * 1024.0)' }
			ruby { code => 'event.set("wlanTxRate",event.get("wlanTxRate").to_i * 125000.0)' }
			ruby { code => 'event.set("wlanRxRate",event.get("wlanRxRate").to_i * 125000.0)' }
		
		} else {
			mutate { 
				add_tag => [ "vendor_client" ] 
				rename => { "signal" => "client_signal" }
		        rename => { "lastip" => "client_ip" }
				rename => { "mac" => "client_mac" }
				convert => {
	            "client_signal" => "float"
				"ack" => "integer"
				"associd" => "integer"
				"ccq" => "integer"
				"idle" => "integer"
				"noisefloor" => "float"
				"rssi" => "integer"
				"rx" => "float"
				"rx_chainmask" => "integer"	
				"stats" => "float"
				"tx" => "float"
				"tx_latency" => "integer"
				"txpower" => "integer"
				"uptime" => "integer"
				}
			}
			ruby { code => 'event.set("snr",event.get("client_signal").to_i - event.get("noisefloor").to_i)' }
	
		}	
	        mutate { remove_field => ["command", "name"] }
	}
}
